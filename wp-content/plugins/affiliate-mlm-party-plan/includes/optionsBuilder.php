<?phpnamespace AffiliateUsers\Includes;use AffiliateUsers\Includes\PluginOptions;use AffiliateUsers\Includes\UsersList;class OptionsBuilder{    protected $id;    protected $title;    protected $tabs = array();    protected $sections = array();    protected $options = array();    public function __construct($title)    {        $this->id = PluginOptions::AFFILIATE_USERS_OPTION;        $this->title = $title;    }    /**     * Add a page with plugins options to the Settings menu     */    public function optionsPage()    {        add_submenu_page(            'sb_integrations_list',            $this->title,            $this->title,            'manage_options',            AFFILIATE_USERS_PAGE,            array($this, 'optionsPageOutput')        );        /*add_filter('plugin_action_links_' . plugin_basename(AFFILIATE_USERS_PAGE), function($links) {                $links[] = '<a href="'. esc_url(get_admin_url(null, 'options-general.php?page=' . plugin_basename('sb_integrations_list'))) .'">' . __('Settings') . '</a>';                $links[] = '<a href="https://mlm-socialbug.com/backoffice">' . __('Docs') . '</a>';                return $links;            }        );*/        add_filter('plugin_action_links_' . plugin_basename(AFFILIATE_USERS_PAGE), array($this, 'mlm_plugin_action_links' ) );     }public function mlm_plugin_action_links($links) {                $links[] = '<a href="'. esc_url(get_admin_url(null, 'options-general.php?page=' . plugin_basename('sb_integrations_list'))) .'">' . __('Settings') . '</a>';                $links[] = '<a href="https://mlm-socialbug.com/backoffice">' . __('Docs') . '</a>';                return $links;            }    /**     * Create a page with plugins options     */    public function optionsPageOutput()    {        $tab = $this->getCurrentTab();        $this->registerAssets();        ?>        <div class="wrap">            <h2><?php echo get_admin_page_title() ?></h2>            <?php $this->adminTabs(); ?>            <?php            switch ($tab) {                case 'users':                    $list = new UsersList();                    $list->prepare_items();                    $list->display();                    break;                default:                    ?>                    <form action="options.php" method="post">                        <input type="hidden" name="<?php echo PluginOptions::AFFILIATE_USERS_OPTION; ?>[reset]" value="0" id="reset-option" />                        <?php                        settings_fields('option_group');                        do_settings_sections(AFFILIATE_USERS_PAGE . $tab);                        submit_button(null, 'primary', 'submit', false);                        submit_button(__('Reset Settings'), 'secondary', 'reset', false);                        ?>                    </form>                    <?php                    break;            }            ?>        </div>        <?php    }    /**     * Add new section to settings     */    public function addTab($id, $title)    {        $this->tabs[$id] = $title;        return $this;    }    /**     * Add new section to settings     */    public function addSection($id, $title, $tab = null)    {        $this->sections[$id] = array('title' => $title, 'tab' => $tab);        return $this;    }    /**     * Add new option to settings     */    public function addOption($id, $title, $type, $section, $parameters = array())    {        $parameters['title'] = $title;        $parameters['section'] = $section;        $parameters['type'] = $type;        $this->options[$id] = $parameters;        return $this;    }    /**     * Register options     * All options will be stored to an array     */    public function settings()    {        register_setting('option_group', $this->id, array($this, 'sanitizeOptions'));        foreach ($this->sections as $id => $data) {            add_settings_section($id, $data['title'], '', AFFILIATE_USERS_PAGE . $data['tab']);        }        foreach ($this->options as $id => $parameters) {            $parameters['id'] = $id;            add_settings_field(                $id,                $parameters['title'],                array($this, 'optionDisplaySettings'),                AFFILIATE_USERS_PAGE . $data['tab'],                $parameters['section'],                $parameters            );        }    }    /**     * Display options     */    public function optionDisplaySettings($args)    {        $options = PluginOptions::getPluginOptions();        extract($args);        switch ($type) {            case 'text':                $value = isset($options[$id]) ? $options[$id] : '';                echo '<input class="regular-text" type="text" id="' . $id . '" name="' . PluginOptions::AFFILIATE_USERS_OPTION . '[' . $id . ']" value="' . $value . '" />';                if (isset($desc) && $desc) {                    echo '<br /><span class="description">' . $desc . '</span>';                }                break;            case 'textarea':                echo '<textarea class="code large-text" cols="50" rows="10" id="' . $id . '" name="' . PluginOptions::AFFILIATE_USERS_OPTION . '[' . $id . ']">' . $options[$id] . '</textarea>';                if (isset($desc) && $desc) {                    echo '<br /><span class="description">' . $desc . '</span>';                }                break;            case 'checkbox':                $value = isset($options[$id]) ? $options[$id] : '';                $checked = ($value == 'on') ? ' checked="checked"' :  '';                echo '<label><input type="checkbox" id="' . $id . '" name="' . PluginOptions::AFFILIATE_USERS_OPTION . '[' . $id . ']"' . $checked . ' value="on" />';                if (isset($desc) && $desc) {                    echo $desc;                }                echo '</label>';                break;            case 'radio':                echo '<fieldset>';                foreach($vals as $v => $l) {                    $checked = ($options[$id] == $v) ? ' checked="checked"' :  '';                    echo '<label><input type="radio" name="' . PluginOptions::AFFILIATE_USERS_OPTION . '[' . $id . ']" value="' . $v . '"' . $checked . ' />' . $l . '</label><br />';                }                echo '</fieldset>';                if (isset($desc) && $desc) {                    echo '<br /><span class="description">' . $desc . '</span>';                }                break;            case 'select':                echo '<select id="' . $id . '" name="' . PluginOptions::AFFILIATE_USERS_OPTION . '[' . $id . ']">';                foreach($vals as $v => $l) {                    $selected = ($options[$id] == $v) ? ' selected="selected"' :  '';                    echo '<option value="' . $v . '"' . $selected . '>' . $l . '</option>';                }                echo '</select>';                if (isset($desc) && $desc) {                    echo '<br /><span class="description">' . $desc . '</span>';                }                break;            case 'color':                echo '<input class="regular-text colorpicker" type="text" id="' . $id . '" name="' . PluginOptions::AFFILIATE_USERS_OPTION . '[' . $id . ']" value="' . $options[$id] . '" />';                if (isset($desc) && $desc) {                    echo '<br /><span class="description">' . $desc . '</span>';                }                break;        }    }    /**     * Sanitize options     */    public function sanitizeOptions($input)    {        if (isset($input['reset']) && ((bool) $input['reset'] == true)) {            return array();        }        foreach ($input as $k => &$v) {            $v = trim($v);            // In this part could be added different validation rules        }        foreach ($this->options as $k => $option) {            switch ($option['type']) {                case 'checkbox':                    $input[$k] = $input[$k] ? 'on' : 'off';                    break;            }        }        if (isset($input['prefix'])) {            global $wp_rewrite;            add_rewrite_rule(                "^({$input['prefix']})/(.+?)$",                'index.php?page=properties&affiliate=$matches[1]&username=$matches[2]',                'top'            );            $wp_rewrite->flush_rules(false);        }        return $input;    }    /*     * Create tabs     */    protected function adminTabs($current = null)    {        if (!$this->tabs) {            return;        }        if (!$current) {            $current = $this->getCurrentTab();        }        echo '<h2 class="nav-tab-wrapper">';        foreach ($this->tabs as $id => $title) {            $class = ($id == $current) ? ' nav-tab-active' : '';            $link = esc_url(get_admin_url(null, 'admin.php?page=' . plugin_basename(AFFILIATE_USERS_PAGE) . '&tab=' . $id));            echo '<a class="nav-tab' . $class . '" href="' . $link . '">' . $title . '</a>';        }        echo '</h2>';    }    /*     * Get current tab     */    protected function getCurrentTab()    {        $tab = sanitize_text_field(filter_input(INPUT_GET, 'tab'));        if (!$tab) {            $tabs = array_keys($this->tabs);            $tab = array_shift($tabs);        }        return $tab;    }    /**     * Add script and css styles to a page     */    protected function registerAssets() {        wp_enqueue_script('client_form_color', AFFILIATE_USERS_URL . 'assets/js/jquery.color.picker.min.js', array('jquery'));        wp_enqueue_script('client_form_options', AFFILIATE_USERS_URL . 'assets/js/options.js', array('jquery'));    }}